Test 1 - Database-kNN
Test 1 shows how to use a simple database (Hibernate) connector and perform the kNN retrieval.<p>It uses the well known travel recommendation example with flat cases.<p> Each case has description but it has not solution nor result.<br>This test exemplifies how to use the database connector implemented through Hibernate and its configuration files. <p> Please, go through the Java Code of the test example to get more information.
jcolibri.test.test1.Test1
doc/api/src-html/jcolibri/test/test1/Test1.html
doc/api/jcolibri/test/test1/Test1.html
doc/api/jcolibri/test/test1/TravelDescription.html
doc/api/jcolibri/connector/DataBaseConnector.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
<example>
Test 2 - Enumerated types
Test 2 extends Test 1 to show the use of enumerated types in the cases. <p> Besides database connection and kNN, this test also exemplifies how the user can define new data types and use them to type the case attributes. <p> Please, go through the Java Code of the test example to get more information.
jcolibri.test.test2.Test2
doc/api/src-html/jcolibri/test/test2/Test2.html
doc/api/jcolibri/test/test2/Test2.html
doc/api/jcolibri/test/test2/TravelDescription.html
doc/api/jcolibri/test/test2/MyStringType.html
doc/api/jcolibri/connector/DataBaseConnector.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
<example>
Test 3 - Compound attributes
Test 3 exemplifies the use of compound attributes in the description of a case. Instead of using a string to define the travel destination, it defines an object "Region" (a bean) that stores different attributes about the region (nearest city, airport, currency...). <p> This structure is mapped to the data base (the SQL file is included with the example). <p> Please, go through the Java Code of the test example to get more information.
jcolibri.test.test3.Test3
doc/api/src-html/jcolibri/test/test3/Test3.html
doc/api/jcolibri/test/test3/Test3.html
doc/api/jcolibri/test/test3/TravelDescription.html
doc/api/jcolibri/test/test3/Region.html
doc/api/jcolibri/connector/DataBaseConnector.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
<example>
Test 4 - Simple adaptation methods
Test 4 shows how to manage a case with solution and executes some simple adaptation methods, basically parameter adjustment.<p>Now the case structure includes a solution bean with the few attributes, like price and hotel, that could be adapted during the CBR cycle. . <p> Please, go through the Java Code of the test example to get more information.
jcolibri.test.test4.Test4
doc/api/src-html/jcolibri/test/test4/Test4.html
doc/api/jcolibri/test/test4/Test4.html
doc/api/jcolibri/test/test4/TravelDescription.html
doc/api/jcolibri/test/test4/Region.html
doc/api/jcolibri/test/test4/TravelSolution.html
doc/api/jcolibri/connector/DataBaseConnector.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
<example>
Test 5 - Database and Ontologies
Test 5 exemplifies a simple use of OWL ontologies as the similarity knowledge. See Test 10 to get a more complex example of ontology use. <p> The case base is stored in a database. <p> The example first shows how to type (or map) a case attribute to an ontology concept; and then it computes an ontology-based similarity function in the KNN retrieval process.<p>Ontology management in jCOLIBRI uses the OntoBridge library that is distributed with jCOLIBRI. <p> Ontobridge is also available through gaia.fdi.ucm.es. <p> Please, go through the Java Code of the test example to get more information.
jcolibri.test.test5.Test5
doc/api/src-html/jcolibri/test/test5/Test5.html
doc/api/jcolibri/test/test5/Test5.html
doc/api/jcolibri/test/test5/TravelDescription.html
doc/api/jcolibri/connector/DataBaseConnector.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
doc/api/jcolibri/method/retrieve/NNretrieval/similarity/local/ontology/package-summary.html
<example>
Test 6 - Plain Text Connector
This example shows how to use the Plain Text connector.<p> The case base is stored in a plain text file (comma or semicolons are used to separate attributes of the cases). <p> The Plain Text connector loads the case base into memory and perform the kNN retrieval. <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test6.Test6
doc/api/src-html/jcolibri/test/test6/Test6.html
doc/api/jcolibri/test/test6/Test6.html
doc/api/jcolibri/test/test6/IrisDescription.html
doc/api/jcolibri/test/test6/IrisSolution.html
doc/api/jcolibri/connector/PlainTextConnector.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
<example>
Test 7 - Maintenance
Test 7 exemplifies the use of maintenance algorithms over the case base. <p> It uses the Iris Case Base that is stored in a plain text file. <p> Lisa Cummins is in charge of the Maintenance library. <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test7.Test7
doc/api/src-html/jcolibri/test/test7/Test7.html
doc/api/jcolibri/test/test7/Test7.html
doc/api/jcolibri/test/test7/IrisDescription.html
doc/api/jcolibri/test/test7/IrisSolution.html
doc/api/jcolibri/connector/PlainTextConnector.html
doc/api/jcolibri/method/maintenance/package-summary.html
<example>
Test 8 - Evaluation
Test 8 shows how to evaluate an application. <p> Evaluation algorithms included in jCOLIBRI are Leave-One-Out, Hold-Out and Same-Split. <p> A graphical visualization of the evaluation results are shown within the example. <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test8.Test8
doc/api/src-html/jcolibri/test/test8/Test8.html
doc/api/jcolibri/test/test8/Test8.html
doc/api/jcolibri/evaluation/package-summary.html
<example>
Test 9 - Visualization
This example shows how to visualizate a case base using the InfoVisual library developed by Josep Lluis Arcos (IIIA-CSIC). <p> The example visualizes the Iris case base where the more similar cases are, the closer are drawn. <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test9.Test9
doc/api/src-html/jcolibri/test/test9/Test9.html
doc/api/jcolibri/test/test9/Test9.html
doc/api/jcolibri/extensions/visualization/package-summary.html
<example>
Test 10 - Ontology connector
Test 10 shows how to use the ontology connector and the ontology-based similarity functions. See also Test 11. <p> The case base is embedded in the ontology, that means, cases are stored as individuals in the OWL file. <p> This representation allows complex structured case representation and similarity computation based on distance measures in the ontology. <p>
jcolibri.test.test10.Test10
doc/api/src-html/jcolibri/test/test10/Test10.html
doc/api/jcolibri/test/test10/Test10.html
doc/api/jcolibri/connector/OntologyConnector.html
doc/api/jcolibri/method/retrieve/NNretrieval/similarity/local/ontology/package-summary.html
<example>
Test 11 - Ontology Sim
Test 11 exemplies other ontological similarity functions for pure ontological cases stored as concept instances. <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test11.Test11
doc/api/src-html/jcolibri/test/test11/Test11.html
doc/api/jcolibri/test/test11/Test11.html
doc/api/jcolibri/method/retrieve/NNretrieval/similarity/local/ontology/package-summary.html
<example>
Test 12a - Gate
This example shows how to use the GATE methods of the Textual CBR extension. <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test12.TestGate
doc/api/src-html/jcolibri/test/test12/TestGate.html
doc/api/jcolibri/test/test12/TestGate.html
doc/api/jcolibri/extensions/textual/IE/package-summary.html
<example>
Test 12b - OpenNLP
This example shows how to use the OpenNLP methods of the Textual CBR extension. <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test12.TestOpenNLP
doc/api/src-html/jcolibri/test/test12/TestOpenNLP.html
doc/api/jcolibri/test/test12/TestOpenNLP.html
doc/api/jcolibri/extensions/textual/IE/package-summary.html
<example>
Test 13a - IE
This test shows how to use the Textual CBR extension in a Restaurant recommender.<p>This example uses the OpenNLP implementation.<p>It uses a custum connector (RestaurantConnector) and similarity functions (AverageMultipleTextValues and TokensContained).<p>To compare the texts it uses a textual similarity function from the jcolibri.method.retrieve.KNNretrieval.similarity.local.textual package. <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test13.Test13a
doc/api/src-html/jcolibri/test/test13/Test13a.html
doc/api/jcolibri/test/test13/Test13a.html
doc/api/jcolibri/test/test13/RestaurantDescription.html
doc/api/jcolibri/extensions/textual/IE/package-summary.html
doc/api/jcolibri/test/test13/connector/RestaurantsConnector.html
doc/api/jcolibri/test/test13/similarity/TokensContained.html
doc/api/jcolibri/test/test13/similarity/AverageMultipleTextValues.html
<example>
Test 13b - Lucene
This test shows how to use the Apache Lucene search engine in a Restaurant recommender.<p>It uses a custum connector (RestaurantConnector) that loads cases from a normal txt file.<p>To compare the texts it uses the Lucene similarity function implemented in jcolibri.method.retrieve.KNNretrieval.similarity.local.textual.LuceneTextSimilarity  <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test13.Test13b
doc/api/src-html/jcolibri/test/test13/Test13b.html
doc/api/jcolibri/test/test13/Test13b.html
doc/api/jcolibri/test/test13/RestaurantDescription.html
doc/api/jcolibri/test/test13/connector/RestaurantsConnector.html
doc/api/jcolibri/method/retrieve/NNretrieval/similarity/local/textual/LuceneTextSimilarity.html
<example>
Test 14 - Evaluation of accuracy
This example shows how to evaluate two datasets at the same time with respect to their accuracy.<p> Lisa Cummins is in charge of the Maintenance and Classification methods, and has developed this example. <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test14.Test14
doc/api/src-html/jcolibri/test/test14/Test14.html
doc/api/jcolibri/test/test14/Test14.html
doc/api/jcolibri/extensions/maintenance_evaluation/DetailedEvaluationReport.html
doc/api/jcolibri/extensions/maintenance_evaluation/evaluators/MaintenanceHoldOutEvaluator.html
doc/api/jcolibri/test/test14/GlassEvaluableApp.html
doc/api/jcolibri/test/test14/IrisEvaluableApp.html
<example>
Test 15 - Evaluation of maintenace
This example shows how to evaluate a dataset at the same time with respect to its accuracy before and after maintenance. <br>The dataset is split, and it is evaluated. Then it is edited by a maintenance algorithm, and reevaluated. The results are stored to file.<p> Lisa Cummins is in charge of the Maintenance and Classification methods, and has developed this example. <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test15.Test15
doc/api/src-html/jcolibri/test/test15/Test15.html
doc/api/jcolibri/test/test15/Test15.html
doc/api/jcolibri/extensions/maintenance_evaluation/DetailedEvaluationReport.html
doc/api/jcolibri/extensions/maintenance_evaluation/evaluators/MaintenanceSameSplitEvaluator.html
doc/api/jcolibri/test/test15/IrisEvaluableApp.html
doc/api/jcolibri/test/test15/IrisMaintainedEvaluableApp.html
<example>
Test 16 - Spam Filter Toy
This example shows how to evaluate the textual similarity functions using classification. It uses a corpus of email (divided into ham and spam messages) and also allows to visualize the case base using a chosen similarity function.<p>This application uses the compression based similarity functions and classification methods developed by Derek Bridge and Lisa Cummins. It also uses the InfoVisual library developed by Josep Lluis Arcos.<p>The emails of the corpus were obtained from the Apache Spamassassin project (http://spamassassin.apache.org/publiccorpus/).<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.test16.Test16
doc/api/src-html/jcolibri/test/test16/Test16.html
doc/api/jcolibri/test/test16/Test16.html
doc/api/jcolibri/test/test16/SpamFilterApp.html
doc/api/jcolibri/test/test16/EmailDescription.html
doc/api/jcolibri/test/test16/EmailSolution.html
doc/api/jcolibri/test/test16/EmailConnector.html
doc/api/jcolibri/method/retrieve/NNretrieval/similarity/local/textual/package-summary.html
doc/api/jcolibri/method/reuse/classification/package-summary.html
doc/api/jcolibri/evaluation/package-summary.html
<example>
Test 17 - Recommender 1
Simple Single-Shot product recommender using form-filling and KNN retrieval.<p>House case base, flat Attribute-Value case representation. In this system, the user defines the query, i.e., his/her requirements, using a form. The recommender retrieves the k most similar cases using Nearest Neighbour retrieval. The k most similar cases are displayed to the user in a table; and the system finishes without any other interaction.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec1.Houses1
doc/api/src-html/jcolibri/test/recommenders/rec1/Houses1.html
doc/api/jcolibri/test/recommenders/rec1/Houses1.html
doc/api/jcolibri/method/gui/formFilling/ObtainQueryWithFormMethod.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
doc/api/jcolibri/method/retrieve/selection/SelectCases.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 18 - Recommender 2
Conversational (type A) recommender using form-filling, Nearest Neighbour retrieval and top k selection. <p>House case base, flat Attribute-Value case representation. <p>This recommender obtains the user preferences using a form. Then it computes  Nearest Neighbour scoring to obtain the most similar cases. If the user does not find the desired item, he/she can refine the requirements using again a form. The form contains initial values and some attributes are hidden (defined by the designer).<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec2.Houses2
doc/api/src-html/jcolibri/test/recommenders/rec2/Houses2.html
doc/api/jcolibri/test/recommenders/rec2/Houses2.html
doc/api/jcolibri/method/gui/formFilling/ObtainQueryWithFormMethod.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
doc/api/jcolibri/method/retrieve/selection/SelectCases.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 19 - Recommender 3
Conversational (type B) recommender using form-filling and Filter-Based retrieval. <p>House case base, flat Attribute-Value case representation. <p> This recommender obtains the user preferences through a form. Then, it performs the  retrieval filtering the items that obbey the user preferences. If the retrieval set is small enough, items are shown to the user. If the retrieval set is too big or  the user does not find the desired item, the system presents again a form to modify the user requirements. The form has some initial values and custom labels.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec3.Houses3
doc/api/src-html/jcolibri/test/recommenders/rec3/Houses3.html
doc/api/jcolibri/test/recommenders/rec3/Houses3.html
doc/api/jcolibri/method/gui/formFilling/ObtainQueryWithFormMethod.html
doc/api/jcolibri/method/retrieve/FilterBasedRetrieval/FilterBasedRetrievalMethod.html
doc/api/jcolibri/extensions/recommendation/conditionals/DisplayCasesIfNumber.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 20 - Recommender 4
Conversational (type B) recommender using Navigation by Asking and Filter retrieval.<p>House case base, flat Attribute-Value case representation. <p>This recommender applies the Navigation by Asking strategy to obtain the user requirements.  This strategy selects an attribute of the items to be asked to the user each iteration. Depending on the values of these attributes a retrieval set is obtained using filtering.  If the retrieval set is small enough it is presented to the user. If it is too big or the user does not find the desired item, the recommender uses again the Navigation by Asking strategy to improve the user requirements.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec4.Houses4
doc/api/src-html/jcolibri/test/recommenders/rec4/Houses4.html
doc/api/jcolibri/test/recommenders/rec4/Houses4.html
doc/api/jcolibri/extensions/recommendation/navigationByAsking/ObtainQueryWithAttributeQuestionMethod.html
doc/api/jcolibri/extensions/recommendation/navigationByAsking/InformationGain.html
doc/api/jcolibri/method/retrieve/FilterBasedRetrieval/FilterBasedRetrievalMethod.html
doc/api/jcolibri/extensions/recommendation/conditionals/DisplayCasesIfNumber.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 21 - Recommender 5
Conversational (type A) recommender using Navigation by Asking and KNN retrieval.<p>House case base, flat Attribute-Value case representation.<p>This recommender combines Navigation by Asking and Nearest Neighbour retrieval. To select the attribute asked to the user, it applies the Similarity Influence method. Then, the NN scoring method is executed and the retrieved items are presented to the user. If the user does not find the desired item, the system asks again for the value of another attribute.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec5.Houses5
doc/api/src-html/jcolibri/test/recommenders/rec5/Houses5.html
doc/api/jcolibri/test/recommenders/rec5/Houses5.html
doc/api/jcolibri/extensions/recommendation/navigationByAsking/ObtainQueryWithAttributeQuestionMethod.html
doc/api/jcolibri/extensions/recommendation/navigationByAsking/SimilarityInfluence.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
doc/api/jcolibri/method/retrieve/selection/SelectCases.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 22 - Recommender 6
Conversational (type A) recommender using Navigation by Proposing and Filtered+NearestNeighbour+topKselection retrieval. <p>House case base, flat Attribute-Value case representation. <p> This recommender implements the Navigation by Proposing strategy.  This strategy selects and displays some items to the user and the he/she makes a critique over one of the displayed items (i.e.: "like this but cheaper"). Users give their preferences filling a form. The filtering method uses as filters the critiques over the selected product. Finally, the system applies Nearest Neighbour to the filtered set and obtain the most similar items to be displayed to the user. <p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec6.Houses6
doc/api/src-html/jcolibri/test/recommenders/rec6/Houses6.html
doc/api/jcolibri/test/recommenders/rec6/Houses6.html
doc/api/jcolibri/method/gui/formFilling/ObtainQueryWithFormMethod.html
doc/api/jcolibri/method/retrieve/FilterBasedRetrieval/FilterBasedRetrievalMethod.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
doc/api/jcolibri/method/retrieve/selection/SelectCases.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/navigationByProposing/queryElicitation/MoreLikeThis.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 23 - Recommender 7
Single-Shot restaurant recommender based on user profiles, Nearest Neighbour retrieval and top k selection .<p>This example represents a prototypical recommender that obtains the user preferences from a profile,  then computes Nearest Neigbour retrieval + top K selection, displays the retrieved items and finishes.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec7.Restaurant7
doc/api/src-html/jcolibri/test/recommenders/rec7/Restaurant7.html
doc/api/jcolibri/test/recommenders/rec7/Restaurant7.html
doc/api/jcolibri/extensions/recommendation/ContentBasedProfile/ObtainQueryFromProfile.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
doc/api/jcolibri/method/retrieve/selection/SelectCases.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 24 - Recommender 8
Conversational (type B) house recommender using both Navigation by Asking and Navigation by Proposing.<p>This example reproduces the behaviour of the well-known ExpertClerk system. It works as a Navigation by Asking system until the number of cases is small enough and then it changes to Navigation by Proposing.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec8.Houses8
doc/api/src-html/jcolibri/test/recommenders/rec8/Houses8.html
doc/api/jcolibri/test/recommenders/rec8/Houses8.html
doc/api/jcolibri/extensions/recommendation/navigationByAsking/ObtainQueryWithAttributeQuestionMethod.html
doc/api/jcolibri/extensions/recommendation/navigationByAsking/InformationGain.html
doc/api/jcolibri/method/retrieve/FilterBasedRetrieval/FilterBasedRetrievalMethod.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/askingAndProposing/DisplayCasesIfNumberAndChangeNavigation.html
doc/api/jcolibri/method/retrieve/selection/diversity/BoundedGreedySelection.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 25 - Recommender 9
Conversational (type A) house recommender using Navigation by Proposing for both One-Off and Interated preference elicitation, and Filtered+NearestNeighbour+selectTopK retrieval. <p>This conversational recommender implements the Navigation by Proposing strategy. Instead of obtaining  the initial query asking to the user, it displays every item in the case base. This way, the user selects one similar to his/her requirements and the system refines the retrieval set for the following iteration. Like other NbP recommenders it uses critiques to filter the working set of items and computes the Nearest Neighbour scoring to obtain the displayed items.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec9.Houses9
doc/api/src-html/jcolibri/test/recommenders/rec9/Houses9.html
doc/api/jcolibri/test/recommenders/rec9/Houses9.html
doc/api/jcolibri/method/retrieve/FilterBasedRetrieval/FilterBasedRetrievalMethod.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
doc/api/jcolibri/method/retrieve/selection/SelectCases.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/navigationByProposing/queryElicitation/MoreLikeThis.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 26 - Recommender 10
Conversational (type A) house recommender system using pre-selected cases at one-off preference elicitation, Navigation By Proposing strategy and Filtering+NearestNeighbour+selectTopK retrieval.<p>This conversational recommender implements the Navigation by Proposing strategy. Instead of obtaining the initial query asking to the user, it uses the Expert Clerk Median scoring algorithm to select k diverse cases that are directly presented to the user in the first iteration. Like other NbP  recommenders it uses critiques to filter the working set of items and computes the Nearest Neighbour scoring to obtain the displayed items.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec10.Houses10
doc/api/src-html/jcolibri/test/recommenders/rec10/Houses10.html
doc/api/jcolibri/test/recommenders/rec10/Houses10.html
doc/api/jcolibri/method/retrieve/DiverseByMedianRetrieval/ExpertClerkMedianScoring.html
doc/api/jcolibri/method/retrieve/FilterBasedRetrieval/FilterBasedRetrievalMethod.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
doc/api/jcolibri/method/retrieve/selection/SelectCases.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/navigationByProposing/queryElicitation/MoreLikeThis.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 27 - Recommender 11
Conversational (type A) house recommender using pre-selected cases at one-off preference elicitation, Navigation By Proposing and Filtering+NearestNeighbour+selectTopK retrieval.<p>This recommender follows the Navigation by Proposing strategy and shows the behaviour of several methods that solve the <i>Iterated Preference Elecitiation</i> task that defines how to modify the user preferences.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec11.Houses11
doc/api/src-html/jcolibri/test/recommenders/rec11/Houses11.html
doc/api/jcolibri/test/recommenders/rec11/Houses11.html
doc/api/jcolibri/method/retrieve/DiverseByMedianRetrieval/ExpertClerkMedianScoring.html
doc/api/jcolibri/method/retrieve/FilterBasedRetrieval/FilterBasedRetrievalMethod.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
doc/api/jcolibri/method/retrieve/selection/SelectCases.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 28 - Recommender 12
Single-Shot movie recommender obtaining description from profile and scoring cases using collaborative recommendation.<p>This recommender uses a collaborative retrieval algorithm. These collaborative algorithms  return items depending on the recommendations of other users. They require an special organization of the case base to be executed. The query is obtained from a serialized profile following the behaviour of many existing on-line movie recommenders.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec12.MoviesRecommender
doc/api/src-html/jcolibri/test/recommenders/rec12/MoviesRecommender.html
doc/api/jcolibri/test/recommenders/rec12/MoviesRecommender.html
doc/api/jcolibri/extensions/recommendation/ContentBasedProfile/ObtainQueryFromProfile.html
doc/api/jcolibri/extensions/recommendation/collaborative/CollaborativeRetrievalMethod.html
doc/api/jcolibri/method/retrieve/selection/SelectCases.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 29 - Recommender 13
Conversational (type B) recommender using Navigation by Proposing and Filtering + Nearest Neighbour + Compromise Driven Selection. House case base. <p>This recommender follows the Navigation by Proposing strategy with two important features: it uses Compromise Driven selection after the NN scoring and it manages a tabu list of prevously displayed items.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec13.Houses13
doc/api/src-html/jcolibri/test/recommenders/rec13/Houses13.html
doc/api/jcolibri/test/recommenders/rec13/Houses13.html
doc/api/jcolibri/method/gui/formFilling/ObtainQueryWithFormMethod.html
doc/api/jcolibri/method/retrieve/FilterBasedRetrieval/FilterBasedRetrievalMethod.html
doc/api/jcolibri/method/retrieve/NNretrieval/NNScoringMethod.html
doc/api/jcolibri/method/retrieve/selection/compromiseDriven/CompromiseDrivenSelection.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/navigationByProposing/queryElicitation/MoreLikeThis.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>
Test 30 - Recommender 14
Single-Shot house recommender using form-filling and Filter-Based retrieval.<p>This example represents the prototypical recommender we usually see in web environments. It obtains the user preferences using a form, retrieves a set of items filtering those that exactly match with the query, displays the retrieved items and finishes.<p> Please, go through the Java Source Code of the test example to get more information.
jcolibri.test.recommenders.rec14.Houses14
doc/api/src-html/jcolibri/test/recommenders/rec14/Houses14.html
doc/api/jcolibri/test/recommenders/rec14/Houses14.html
doc/api/jcolibri/method/gui/formFilling/ObtainQueryWithFormMethod.html
doc/api/jcolibri/method/retrieve/FilterBasedRetrieval/FilterBasedRetrievalMethod.html
doc/api/jcolibri/extensions/recommendation/casesDisplay/DisplayCasesTableMethod.html
doc/api/jcolibri/extensions/recommendation/package-summary.html
<example>